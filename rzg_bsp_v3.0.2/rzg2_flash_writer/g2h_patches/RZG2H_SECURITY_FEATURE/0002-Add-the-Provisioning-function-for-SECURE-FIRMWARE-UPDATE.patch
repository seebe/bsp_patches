diff -uprN git_org/fiploader.c git_mod/fiploader.c
--- git_org/fiploader.c	2021-06-23 13:17:02.278910396 +0900
+++ git_mod/fiploader.c	2021-06-23 09:19:21.000000000 +0900
@@ -32,6 +32,8 @@
 /*
  * History : DD.MM.YYYY Version  Description
  *         : 31.03.2021 1.00     First Release
+ *         : 30.06.2021 1.10     Add feature which enable to save boot header
+ *                               informations of provisioned firmware data 
  */
 
 #include <stddef.h>
@@ -62,7 +64,8 @@
 
 #define TOC_HEADER_NAME_PLAIN       (0xAA640001)
 #define TOC_HEADER_NAME_KEYRING     (0xAA640002)
-#define TOC_HEADER_NAME_ENCDATA     (0xAA640003)
+#define TOC_HEADER_NAME_BOOT_FW     (0xAA640003)
+#define TOC_HEADER_NAME_NS_BL2U     (0xAA640004)
 
 #ifndef FIP_FLAGS_END_OF_PACKAGE
 #define FIP_FLAGS_END_OF_PACKAGE    (0x8000)
@@ -76,6 +79,8 @@
 #define S_INST_LOAD_SIZE            (1296)
 #define S_INST_LOAD_ADDR_SPI        (0x00500000)
 
+#define ENC_HEADER_SIZE             (48)
+
 #define SEC_MODULE_RET_OK           (0)
 #define SEC_MODULE_SHARED_SIZE      (0x200)
 
@@ -161,6 +166,11 @@ typedef struct {
     } prm;
 } st_sec_module_arg_t;
 
+typedef struct {
+    uint8_t inst_data[S_INST_LOAD_SIZE];
+    uint8_t enc_header_boot_fw[ENC_HEADER_SIZE];
+} st_security_data_t;
+
 typedef int (* fp_sec_module_api_t) (void);
 
 /*******************************************************************************
@@ -199,7 +209,7 @@ static uintptr_t gs_temp_ram_min;
 static uintptr_t gs_temp_ram_max;
 static uint32_t gs_temp_data_size;
 
-static uint32_t *gs_s_inst_data;
+static st_security_data_t *gs_security_data;
 
 static st_sec_module_arg_t* secure_boot_arg;
 static fp_sec_module_api_t  secure_boot_api;
@@ -210,6 +220,7 @@ static int32_t fip_load(uintptr_t *load_
 static int32_t fip_parse(uintptr_t load_min, uintptr_t load_max, uint32_t *load_size);
 static int32_t fip_inject_key(uintptr_t load_min, uintptr_t load_max, uint32_t *load_size);
 static int32_t fip_reenc_data(uintptr_t load_min, uintptr_t load_max, uint32_t *load_size);
+static int32_t update_security_data(void);
 static int32_t fip_copy_toc_hdr(uintptr_t load_min, uintptr_t load_max, fip_toc_entry_t **toc_e_end);
 static int32_t fip_write(uintptr_t fip_base, uint32_t fip_size);
 static int32_t flash_init (void);
@@ -339,10 +350,23 @@ static void fip_main(void)
                 err = fip_inject_key(load_data_min, load_data_max, &load_size);
                 break;
             }
-            case TOC_HEADER_NAME_ENCDATA:
+            case TOC_HEADER_NAME_BOOT_FW:
             {
                 /* Re-encrypt the temporarily encrypted data and place it in the temporary area. */
                 err = fip_reenc_data(load_data_min, load_data_max, &load_size);
+                
+                /* Update boot header of Re-encrypt data . */
+                if (0 == err)
+                {
+                    err = update_security_data();
+                }
+
+                break;
+            }
+            case TOC_HEADER_NAME_NS_BL2U:
+            {
+                /* Re-encrypt the temporarily encrypted ns_bl2u and place it in the temporary area. */
+                err = fip_reenc_data(load_data_min, load_data_max, &load_size);
                 break;
             }
             case TOC_HEADER_NAME_PLAIN:
@@ -532,7 +556,7 @@ static int32_t fip_inject_key(uintptr_t
         PutStr("",1);
 
         /* Copy the injected keyring to the temporary area. */
-        memcpy((void *)temp_addr, gs_s_inst_data, S_INST_LOAD_SIZE);
+        memcpy((void *)temp_addr, gs_security_data->inst_data, S_INST_LOAD_SIZE);
 
         /* Update the TOC entry for the injected keyring. */
         toc_e_tmp->size = S_INST_LOAD_SIZE;
@@ -557,6 +581,7 @@ static int32_t fip_reenc_data(uintptr_t
     fip_toc_entry_t *toc_e_tmp;
 
     uintptr_t temp_addr;
+    uintptr_t p_boot_header;
     st_re_enc_data_t * re_enc_data;
 
     /* Copy the TOC header and TOC entry to the temporary area */
@@ -642,6 +667,37 @@ static int32_t fip_reenc_data(uintptr_t
     return 0;
 }
 
+static int32_t update_security_data(void)
+{
+    fip_toc_entry_t *toc_e_top;
+
+    uintptr_t p_boot_header;
+
+    toc_e_top = (fip_toc_entry_t *)(gs_temp_ram_min + sizeof(fip_toc_header_t));
+
+    if (0 == toc_e_top->size)
+    {
+        PutStr(" ",1);
+        PutStr("ERROR: Data size is zero.", 1);
+        return -1;
+    }
+    
+    PutStr(" Save Firmware boot header",1);
+    p_boot_header = gs_temp_ram_min + toc_e_top->offset_address + toc_e_top->size - ENC_HEADER_SIZE;
+
+    memcpy(gs_security_data->enc_header_boot_fw, (void *)p_boot_header, ENC_HEADER_SIZE);
+
+    if (FLASH_TYPE_SPI == gs_flash_type)
+    {
+        if (0 != flash_write (S_INST_LOAD_ADDR_SPI, gs_security_data, sizeof(st_security_data_t)))
+        {
+            return -1;
+        }
+    }
+
+    return 0;
+}
+
 static int32_t fip_copy_toc_hdr(uintptr_t load_min, uintptr_t load_max, fip_toc_entry_t **toc_e_end)
 {
     fip_toc_entry_t *toc_e;
@@ -870,7 +926,7 @@ static int32_t flash_read_sec_mod (void)
 
         inst_data_load = (uintptr_t)S_INST_LOAD_ADDR_SPI;
         inst_data_exec = (uintptr_t)S_INST_EXEC_ADDR;
-        inst_data_size = S_INST_LOAD_SIZE;
+        inst_data_size = sizeof(st_security_data_t);
 
         Fast4RdQspiFlash(sec_mod_load, sec_mod_exec, sec_mod_size);
 
@@ -884,7 +940,7 @@ static int32_t flash_read_sec_mod (void)
     Data2HexAscii(sec_mod_load + sec_mod_size, log_str, 4);
     PutStr(log_str,1);
 
-    gs_s_inst_data = (uint32_t *)inst_data_exec;
+    gs_security_data = (st_security_data_t *)inst_data_exec;
     secure_boot_arg = (st_sec_module_arg_t *)sec_mod_exec;
     secure_boot_api = (fp_sec_module_api_t)(sec_mod_exec + SEC_MODULE_SHARED_SIZE);
