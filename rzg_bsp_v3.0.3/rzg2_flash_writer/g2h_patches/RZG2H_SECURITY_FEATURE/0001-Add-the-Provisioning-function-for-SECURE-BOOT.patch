From a5ce3db80a384baebf2902f14d115b06aab70c76 Mon Sep 17 00:00:00 2001
From: Takunori Otsuka <takunori.otsuka.ur@renesas.com>
Date: Mon, 22 Mar 2021 13:52:51 +0900
Subject: [PATCH] Add the Provisioning function for SECURE BOOT

This commit adds the Provisioning function for SECURE BOOT

The added functions are as follows.
 * Loading FIP
 * Re-encryption of Keyring
 * Re-encryption of User Data

Signed-off-by: Takunori Otsuka <takunori.otsuka.ur@renesas.com>
---
 Message.c           |   4 +
 dgtable.c           |   5 +
 fiploader.c         | 915 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 include/dgtable.h   |   2 +-
 include/fiploader.h |  40 +++
 makefile            |  16 +-
 makefile.linaro     |  12 +
 7 files changed, 991 insertions(+), 3 deletions(-)
 mode change 100644 => 100755 Message.c
 mode change 100644 => 100755 dgtable.c
 create mode 100644 fiploader.c
 mode change 100644 => 100755 include/dgtable.h
 create mode 100644 include/fiploader.h
 mode change 100644 => 100755 makefile
 mode change 100644 => 100755 makefile.linaro

diff --git a/Message.c b/Message.c
old mode 100644
new mode 100755
index 041e557..c2046b1
--- a/Message.c
+++ b/Message.c
@@ -40,6 +40,10 @@ const char *const AllHelpMess[ALL_HELP_MESS_LINE] = {
 	" XCS            erase program to SPI Flash",
 	" XLS2           write program to SPI Flash",
 	" XLS3           write program to SPI Flash(Binary)",
+#if SEC_PRV == 1
+	" XLS2S          Unpack the FIP and write to SPI Flash",
+	" XLS3S          Unpack the FIP and write to SPI Flash(Binary)",
+#endif /* SEC_PRV == 1 */
 	"",
 #endif /* SERIAL_FLASH == 1 */
 #if EMMC == 1
diff --git a/dgtable.c b/dgtable.c
old mode 100644
new mode 100755
index 55dea72..af0f713
--- a/dgtable.c
+++ b/dgtable.c
@@ -39,6 +39,7 @@
 #if EMMC == 1
 #include "dgemmc.h"
 #endif /* EMMC == 1 */
+#include "fiploader.h"
 
 /********************************************************/
 /*        ROM TABLE                                     */
@@ -51,6 +52,10 @@ const com_menu MonCom[COMMAND_UNIT] = {
 	"XLS"		, dgG2LoadSpiflash0		,  0	,
 	"XLS2"		, dgG2LoadSpiflash0_2		,  0	,
 	"XLS3"		, dgG2LoadSpiflash0_3		,  0	,
+#if SEC_PRV == 1
+	"XLS2S"		, dgG2LoadSpiflash0_2s		,  0	,
+	"XLS3S"		, dgG2LoadSpiflash0_3s		,  0	,
+#endif /* SEC_PRV == 1 */
 	"XINFO_SA0"	, dgG2InfoSpiflash0_SA0		,  0	,
 	"XINFO_SA0_S"	, dgG2InfoSetSpiflash0_SA0	,  0	,
 	"XINFO"		, dgG2InfoSpiflash0		,  0	,
diff --git a/fiploader.c b/fiploader.c
new file mode 100644
index 0000000..56c81a4
--- /dev/null
+++ b/fiploader.c
@@ -0,0 +1,915 @@
+/*
+ * Copyright (c) 2021, Renesas Electronics Corporation
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *   - Redistributions of source code must retain the above copyright notice,
+ *     this list of conditions and the following disclaimer.
+ *
+ *   - Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ *
+ *   - Neither the name of Renesas nor the names of its contributors may be
+ *     used to endorse or promote products derived from this software without
+ *     specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+/*
+ * History : DD.MM.YYYY Version  Description
+ *         : 31.03.2021 1.00     First Release
+ */
+
+#include <stddef.h>
+#include <string.h>
+
+#include "types.h"
+#include "common.h"
+#include "mmio.h"
+#include "reg_rzg2.h"
+#include "devdrv.h"
+#include "dgtable.h"
+#include "dgmodul4.h"
+#include "ramckmdl.h"
+#include "spiflash1drv.h"
+#include "fiploader.h"
+
+/*******************************************************************************
+ Macro definitions
+ ******************************************************************************/
+
+#define FLASH_TYPE_SPI              (0x00000000)
+#define FLASH_TYPE_EMMC             (0x00000001)
+
+#define LOAD_MODE_SREC              (0x00000000)
+#define LOAD_MODE_BIN               (0x00000001)
+
+#define UUID_NODE_LEN               (6)
+
+#define TOC_HEADER_NAME_PLAIN       (0xAA640001)
+#define TOC_HEADER_NAME_KEYRING     (0xAA640002)
+#define TOC_HEADER_NAME_ENCDATA     (0xAA640003)
+
+#ifndef FIP_FLAGS_END_OF_PACKAGE
+#define FIP_FLAGS_END_OF_PACKAGE    (0x8000)
+#endif
+
+#define SEC_MOD_EXEC_ADDR           (0x440E0000)
+#define SEC_MOD_LOAD_SIZE           (0x0001E000)
+#define SEC_MOD_LOAD_ADDR_SPI       (0x00400000)
+
+#define S_INST_EXEC_ADDR            (0x440FE000)
+#define S_INST_LOAD_SIZE            (1296)
+#define S_INST_LOAD_ADDR_SPI        (0x00500000)
+
+#define SEC_MODULE_RET_OK           (0)
+#define SEC_MODULE_SHARED_SIZE      (0x200)
+
+#define INC_BINARY(section, binary, symbol) __asm__( \
+                    ".section " #section "\n" \
+                    ".balign 8\n" \
+                    ".global " #symbol "\n" \
+                    #symbol ":\n" \
+                    ".incbin \""binary"\" \n" \
+                    ".global _sizeof_" #symbol "\n" \
+                    ".set _sizeof_" #symbol ", . - " #symbol "\n" \
+                    ".balign 4\n" \
+                    ".section \".text\"\n")
+
+/*******************************************************************************
+ Typedef definitions
+ ******************************************************************************/
+typedef struct uuid {
+    uint8_t     time_low[4];
+    uint8_t     time_mid[2];
+    uint8_t     time_hi_and_version[2];
+    uint8_t     clock_seq_hi_and_reserved;
+    uint8_t     clock_seq_low;
+    uint8_t     node[UUID_NODE_LEN];
+} uuid_t;
+
+typedef struct fip_toc_header {
+    uint32_t    name;
+    uint32_t    serial_number;
+    uint64_t    flags;
+} fip_toc_header_t;
+
+typedef struct fip_toc_entry {
+    uuid_t      uuid;
+    uint64_t    offset_address;
+    uint64_t    size;
+    uint64_t    flags;
+    uint64_t    nvm_offset;
+} fip_toc_entry_t;
+
+typedef enum {
+    CMD_RESET_INIT = 0,
+    CMD_INJECT_KEY,
+    CMD_RE_ENC_DATA,
+    CMD_VERIFY_KEY,
+    CMD_VERIFY_DATA,
+    CMD_MAX,
+} e_cmd_type_t;
+
+typedef struct {
+    uint64_t inst_area;
+} st_reset_init_t;
+
+typedef struct {
+    uint64_t key_ring;
+    uint64_t prov_key;
+} st_inject_key_t;
+
+typedef struct {
+    int num;
+    struct {
+        uint64_t src;
+        uint64_t len;
+        uint64_t dst;
+    } list[16];
+} st_re_enc_data_t;
+
+typedef struct {
+    uint64_t src;
+    uint64_t len;
+    uint64_t dst;
+    uint64_t heap;
+} st_verify_data_t;
+
+typedef struct {
+    uint64_t cmd;
+    uint64_t len;
+    union {
+        st_reset_init_t reset_init;
+        st_inject_key_t inject_key;
+        st_re_enc_data_t re_enc_data;
+        st_verify_data_t verify_data;
+    } prm;
+} st_sec_module_arg_t;
+
+typedef int (* fp_sec_module_api_t) (void);
+
+/*******************************************************************************
+ Exported global variables (to be accessed by other files)
+ ******************************************************************************/
+extern uint32_t gSpiFlashSvArea;
+extern uint32_t gUserPrgStartAdd;
+
+extern uint32_t gQspi_sa_size;
+extern uint32_t gQspi_end_addess;
+
+extern uint32_t gEncProvKey[];
+
+extern void *memset(void *dst, int val, unsigned long count);
+extern void *memcpy(void *dst, const void *src, size_t len);
+extern void Fast4RdQspiFlash(uint32_t sourceSpiAdd, uint32_t destinationAdd, uint32_t byteCount);
+
+/*******************************************************************************
+ Private global variables and functions
+ ******************************************************************************/
+static char log_str[64];
+
+static uuid_t uuid_null;
+
+static uint32_t gs_load_mode;
+static uint32_t gs_flash_type;
+
+static uintptr_t gs_work_ram_min;
+static uintptr_t gs_work_ram_max;
+
+static uintptr_t gs_load_ram_min;
+static uintptr_t gs_load_ram_max;
+static uint32_t gs_load_ram_len;
+
+static uintptr_t gs_temp_ram_min;
+static uintptr_t gs_temp_ram_max;
+static uint32_t gs_temp_data_size;
+
+static uint32_t *gs_s_inst_data;
+
+static st_sec_module_arg_t* secure_boot_arg;
+static fp_sec_module_api_t  secure_boot_api;
+
+static void fip_start_up(void);
+static void fip_main(void);
+static int32_t fip_load(uintptr_t *load_min, uintptr_t *load_max);
+static int32_t fip_parse(uintptr_t load_min, uintptr_t load_max, uint32_t *load_size);
+static int32_t fip_inject_key(uintptr_t load_min, uintptr_t load_max, uint32_t *load_size);
+static int32_t fip_reenc_data(uintptr_t load_min, uintptr_t load_max, uint32_t *load_size);
+static int32_t fip_copy_toc_hdr(uintptr_t load_min, uintptr_t load_max, fip_toc_entry_t **toc_e_end);
+static int32_t fip_write(uintptr_t fip_base, uint32_t fip_size);
+static int32_t flash_init (void);
+static int32_t flash_write (uintptr_t addr, uintptr_t data, uint32_t size);
+static int32_t flash_read_sec_mod (void);
+
+INC_BINARY(".rodata", SEC_PRV_KEY_ENC, gEncProvKey);
+
+/************************************************************************
+    MODULE          : dgG2LoadSpiflash0_2s                              *
+    FUNCTION        : load Program to Spiflash memory                   *
+    COMMAND         : XLS2S                                             *
+    INPUT PARAMETER : XLS2S                                             *
+*************************************************************************/
+#if SERIAL_FLASH == 1
+void dgG2LoadSpiflash0_2s(void)
+{
+    gs_load_mode = LOAD_MODE_SREC;
+
+    gs_flash_type = FLASH_TYPE_SPI;
+    gSpiFlashSvArea = 3;
+
+    PutStr(" ",1);
+    PutStr("===== Qspi writing of RZ/G2 Board Command =====",1);
+    PutStr("Load Program to SPI Flash",1);
+    PutStr("Writes to any of SPI address.",1);
+
+    fip_start_up();
+    return;
+}
+#endif
+
+/************************************************************************
+    MODULE          : dgG2LoadSpiflash0_3s                              *
+    FUNCTION        : load Program to Spiflash memory                   *
+    COMMAND         : XLS3S                                             *
+    INPUT PARAMETER : XLS3S                                             *
+*************************************************************************/
+#if SERIAL_FLASH == 1
+void dgG2LoadSpiflash0_3s(void)
+{
+    gs_load_mode = LOAD_MODE_BIN;
+
+    gs_flash_type = FLASH_TYPE_SPI;
+    gSpiFlashSvArea = 3;
+
+    PutStr(" ",1);
+    PutStr("===== Qspi writing of RZ/G2 Board Command =====",1);
+    PutStr("Load Program to SPI Flash",1);
+    PutStr("Writes to any of SPI address.",1);
+
+    fip_start_up();
+
+    return;
+}
+#endif
+
+static void fip_start_up()
+{
+    gUserPrgStartAdd = LS_WORK_DRAM_SADD;
+
+    gs_work_ram_min = LS_WORK_DRAM_SADD;
+    gs_work_ram_max = LS_WORK_DRAM_EADD_64M;
+
+    /*
+    * 0x40000000 +-----------------------------+
+    *            |                             |
+    *            ~ User program execution area ~
+    *            |            (256M)           |
+    * 0x50000000 +------ gs_work_ram_min ------+ <-- gs_load_ram_min
+    *            | RAM area to load FIP (32M)  |
+    *            +-----------------------------+ <-- gs_load_ram_max - gs_temp_ram_min
+    *            | Temporary RAM area (32M)    |
+    * 0x54000000 +------- gs_work_ram_max -----+ <-- gs_temp_ram_max
+    */
+
+    gs_load_ram_min = gs_work_ram_min;
+    gs_load_ram_len = ((gs_work_ram_max - gs_work_ram_min) + 1) >> 1;
+    gs_load_ram_max = (gs_load_ram_min + gs_load_ram_len) - 1;
+
+    gs_temp_ram_min = gs_load_ram_max + 1;
+    gs_temp_ram_max = (gs_temp_ram_min + gs_load_ram_len) - 1;
+    gs_temp_data_size = 0;
+
+    memset(&uuid_null, 0, sizeof(uuid_t));
+
+    fip_main();
+
+    return;
+}
+
+static void fip_main(void)
+{
+    int32_t err = 0;
+    uintptr_t load_data_min, load_data_max;
+    uintptr_t fip_min, fip_max;
+    uint32_t load_size, fip_size, fip_name, fip_flags;
+
+    /* flash driver initialization */
+    if(0 != flash_init())
+    {
+        return;
+    }
+
+    /* WorkMemory Clear (Write H'FF) */
+    PutStr(" ",1);
+    PutStr("Work RAM(H'50000000-H'53FFFFFF) Clear....",1);
+    FillData32Bit((uint32_t *)gs_work_ram_min, (uint32_t *)gs_work_ram_max, 0xFFFFFFFF);
+
+    /* load FIP to RAM */
+    if (0 > fip_load(&load_data_min, &load_data_max))
+    {
+        return;
+    }
+
+    do
+    {
+        fip_name = ((fip_toc_header_t *)load_data_min)->name;
+        fip_flags = ((fip_toc_header_t *)load_data_min)->flags >> 32;
+
+        gs_temp_data_size = 0;
+
+        switch (fip_name) {
+            case TOC_HEADER_NAME_KEYRING:
+            {
+                /* Inject the keyring and place it in the temporary area. */
+                err = fip_inject_key(load_data_min, load_data_max, &load_size);
+                break;
+            }
+            case TOC_HEADER_NAME_ENCDATA:
+            {
+                /* Re-encrypt the temporarily encrypted data and place it in the temporary area. */
+                err = fip_reenc_data(load_data_min, load_data_max, &load_size);
+                break;
+            }
+            case TOC_HEADER_NAME_PLAIN:
+            {
+                /* The FIP is parsed only and copied to the temporary area. */
+                err = fip_parse(load_data_min, load_data_max, &load_size);
+                break;
+            }
+            default:
+            {
+                err = -1;
+                PutStr(" ",1);
+                PutStr("ERROR: Unknown FIP name : H'", 0);
+                Data2HexAscii(fip_name, log_str, 4);
+                PutStr(log_str,1);
+                break;
+            }
+        }
+
+        if (0 == err)
+        {
+            /* The FIP in the temporary area is unpacked and written to flash memory. */
+            if (0 != fip_write(gs_temp_ram_min, gs_temp_data_size))
+            {
+                return;
+            }
+
+            if (0 != (fip_flags & FIP_FLAGS_END_OF_PACKAGE))
+            {
+                PutStr(" ",1);
+                PutStr("The FIP platform flag EOP has been detected.",1);
+                break;
+            }
+            load_data_min += load_size;
+        }
+    } while((0 == err) && (load_data_min < load_data_max));
+
+    if (err == 0)
+    {
+        PutStr(" ",1);
+        PutStr("Finish!.",1);
+        PutStr(" ",1);
+    }
+
+    return;
+}
+
+static int32_t fip_load(uintptr_t *load_data_min, uintptr_t *load_data_max)
+{
+    if (LOAD_MODE_SREC == gs_load_mode)
+    {
+        /* Load S-Recode format FIP into RAM. */
+        if (0 != dgLS_Load_Offset2((uint32_t *)load_data_max, (uint32_t *)load_data_min))
+        {
+            return -1;
+        }
+    }
+    else if (LOAD_MODE_BIN == gs_load_mode)
+    {
+        char bin_data;
+        uint32_t image_offset = 0U;
+        uint32_t image_size = 0U;
+
+        /* Load binary format FIP into RAM. */
+        PutStr(" ",1);
+        PutStr("===== Please input FIP binary size =====",1);
+        SetSizeInputKey(&image_size);
+
+        if (image_size > gs_load_ram_len)
+        {
+            PutStr(" ",1);
+            PutStr("ERROR: The load size limit has been exceeded.", 1);
+            return -1;
+        }
+
+        PutStr(" ",1);
+        PutStr("please send ! (binary)",1);
+        while (image_offset < image_size)
+        {
+            GetChar(&bin_data);
+            *(uint8_t *)(gs_load_ram_min + image_offset) = bin_data;
+            image_offset++;
+        }
+        *load_data_min = gs_load_ram_min;
+        *load_data_max = gs_load_ram_min + image_size - 1;
+    }
+    else
+    {
+        PutStr(" ",1);
+        PutStr("ERROR: Unknown download mode : H'", 0);
+        Data2HexAscii(gs_load_mode, log_str, 4);
+        PutStr(log_str,1);
+        return -1;
+    }
+
+    return 0;
+}
+
+static int32_t fip_parse(uintptr_t load_min, uintptr_t load_max, uint32_t *load_size)
+{
+    fip_toc_entry_t *toc_e_tmp;
+    fip_toc_entry_t *toc_e_end;
+    uintptr_t temp_addr;
+
+    /* Copy the TOC header and TOC entry to the temporary area */
+    if (0 != fip_copy_toc_hdr(load_min, load_max, &toc_e_end))
+    {
+        return -1;
+    }
+
+    toc_e_tmp = (fip_toc_entry_t *)(gs_temp_ram_min + sizeof(fip_toc_header_t));
+
+    while(toc_e_tmp < toc_e_end)
+    {
+        temp_addr = gs_temp_ram_min + toc_e_tmp->offset_address;
+
+        if ((gs_temp_ram_max + 1) < (temp_addr + toc_e_tmp->size))
+        {
+            PutStr(" ",1);
+            PutStr("ERROR: The copy data size exceeds the capacity of the temporary ram area.", 1);
+            return -1;
+        }
+
+        /* Copy the data to the temporary area. */
+        memcpy((void *)temp_addr, (void *)(load_min + toc_e_tmp->offset_address), toc_e_tmp->size);
+
+        toc_e_tmp++;
+    }
+
+    *load_size = toc_e_end->offset_address;
+
+    gs_temp_data_size = toc_e_end->offset_address;
+
+    return 0;
+}
+
+static int32_t fip_inject_key(uintptr_t load_min, uintptr_t load_max, uint32_t *load_size)
+{
+    fip_toc_entry_t *toc_e_tmp;
+    fip_toc_entry_t *toc_e_end;
+
+    uintptr_t temp_addr;
+    st_inject_key_t * inject_key;
+
+    /* Copy the TOC header and TOC entry to the temporary area */
+    if (0 != fip_copy_toc_hdr(load_min, load_max, &toc_e_end))
+    {
+        return -1;
+    }
+
+    toc_e_tmp = (fip_toc_entry_t *)(gs_temp_ram_min + sizeof(fip_toc_header_t));
+
+    temp_addr = (uintptr_t)(toc_e_end + 1);
+
+    while(toc_e_tmp < toc_e_end)
+    {
+        if ((gs_temp_ram_max + 1) < (temp_addr + S_INST_LOAD_SIZE))
+        {
+            PutStr(" ",1);
+            PutStr("ERROR: The copy data size exceeds the capacity of the temporary ram area.", 1);
+            return -1;
+        }
+
+        /* Load the Security Module from flash memory. */
+        if (0 != flash_read_sec_mod())
+        {
+            return -1;
+        }
+
+        /* Create parameters for keyring injection. */
+        secure_boot_arg->cmd = CMD_INJECT_KEY;
+        secure_boot_arg->len = sizeof(st_inject_key_t);
+
+        inject_key = &(secure_boot_arg->prm).inject_key;
+        inject_key->key_ring = (uint64_t)load_min + toc_e_tmp->offset_address;
+        inject_key->prov_key = (uint64_t)gEncProvKey;
+
+        /* Inject the keyring */
+        PutStr(" Security Module: CMD_INJECT_KEY.....",0);
+        if (SEC_MODULE_RET_OK != secure_boot_api())
+        {
+            PutStr(" Error!", 1);
+            PutStr("",1);
+            return -1;
+        }
+        PutStr(" Success!", 1);
+        PutStr("",1);
+
+        /* Copy the injected keyring to the temporary area. */
+        memcpy((void *)temp_addr, gs_s_inst_data, S_INST_LOAD_SIZE);
+
+        /* Update the TOC entry for the injected keyring. */
+        toc_e_tmp->size = S_INST_LOAD_SIZE;
+        toc_e_tmp->offset_address = temp_addr - gs_temp_ram_min;
+        temp_addr += toc_e_tmp->size;
+
+        toc_e_tmp++;
+    }
+
+    *load_size = toc_e_end->offset_address;
+
+    toc_e_end->offset_address = temp_addr - gs_temp_ram_min;
+
+    gs_temp_data_size = toc_e_end->offset_address;
+
+    return 0;
+}
+
+static int32_t fip_reenc_data(uintptr_t load_min, uintptr_t load_max, uint32_t *load_size)
+{
+    fip_toc_entry_t *toc_e_end;
+    fip_toc_entry_t *toc_e_tmp;
+
+    uintptr_t temp_addr;
+    st_re_enc_data_t * re_enc_data;
+
+    /* Copy the TOC header and TOC entry to the temporary area */
+    if (0 != fip_copy_toc_hdr(load_min, load_max, &toc_e_end))
+    {
+        return -1;
+    }
+
+    toc_e_tmp = (fip_toc_entry_t *)(gs_temp_ram_min + sizeof(fip_toc_header_t));
+
+    temp_addr = (uintptr_t)(toc_e_end + 1);
+
+    /* Load the Security Module from flash memory. */
+    if (0 != flash_read_sec_mod())
+    {
+        return -1;
+    }
+
+    /* Create parameters for re-encryption. */
+    secure_boot_arg->cmd = CMD_RE_ENC_DATA;
+    secure_boot_arg->len = sizeof(st_re_enc_data_t);
+
+    re_enc_data = &(secure_boot_arg->prm).re_enc_data;
+    re_enc_data->num = 0;
+
+    while(toc_e_tmp < toc_e_end)
+    {
+        uint64_t reenc_data_size;
+
+        if (16 <= re_enc_data->num)
+        {
+            PutStr(" ",1);
+            PutStr("ERROR: The number of data to be re-encrypted exceeds 16.", 1);
+            return -1;
+        }
+
+        if (0 == re_enc_data->num)
+        {
+            reenc_data_size = toc_e_tmp->size + 64;
+        } else {
+            reenc_data_size = toc_e_tmp->size + 16;
+        }
+
+        if ((gs_temp_ram_max + 1) < (temp_addr + sizeof(reenc_data_size) + reenc_data_size))
+        {
+            PutStr(" ",1);
+            PutStr("ERROR: The re-encrypted data size exceeds the capacity of the temporary ram area.", 1);
+            return -1;
+        }
+
+        re_enc_data->list[re_enc_data->num].src = (uint64_t)load_min + toc_e_tmp->offset_address;
+        re_enc_data->list[re_enc_data->num].len = (uint64_t)toc_e_tmp->size;
+        re_enc_data->list[re_enc_data->num].dst = (uint64_t)temp_addr + sizeof(reenc_data_size);
+        re_enc_data->num++;
+
+        *(uint64_t *)temp_addr = reenc_data_size;
+
+        /* Update the TOC entry for the re-encrypted data in advance. */
+        toc_e_tmp->size = reenc_data_size + sizeof(reenc_data_size);
+        toc_e_tmp->offset_address = temp_addr - gs_temp_ram_min;
+        temp_addr += toc_e_tmp->size;
+
+        toc_e_tmp++;
+    }
+
+    /* Re-encrypt the data and output it to the temporary area. */
+    PutStr(" Security Module: CMD_RE_ENC_DATA.....",0);
+    if (SEC_MODULE_RET_OK != secure_boot_api())
+    {
+        PutStr(" Error!", 1);
+        PutStr(" ",1);
+        return -1;
+    }
+    PutStr(" Success!", 1);
+    PutStr("",1);
+
+    *load_size = toc_e_end->offset_address;
+
+    toc_e_end->offset_address = temp_addr - gs_temp_ram_min;
+
+    gs_temp_data_size = toc_e_end->offset_address;
+
+    return 0;
+}
+
+static int32_t fip_copy_toc_hdr(uintptr_t load_min, uintptr_t load_max, fip_toc_entry_t **toc_e_end)
+{
+    fip_toc_entry_t *toc_e;
+    fip_toc_entry_t *toc_e_tmp;
+
+    /* Get the address of the first TOC entry. */
+    toc_e = (fip_toc_entry_t *)(load_min + sizeof(fip_toc_header_t));
+
+    /* Copy the TOC header to the temporary area. */
+    memcpy((void *)gs_temp_ram_min, (void *)load_min, sizeof(fip_toc_header_t));
+    toc_e_tmp = (fip_toc_entry_t *)(gs_temp_ram_min + sizeof(fip_toc_header_t));
+
+    *toc_e_end = NULL;
+
+    while ((uintptr_t)(toc_e + 1) <= (load_max + 1))
+    {
+        uintptr_t data_addr = load_min + toc_e->offset_address;
+
+        /* Find the ToC terminator entry. */
+        if (0 == memcmp(&toc_e->uuid, &uuid_null, sizeof(uuid_t)))
+        {
+            *toc_e_end = toc_e;
+            break;
+        }
+
+        if (0 == toc_e->size)
+        {
+            PutStr(" ",1);
+            PutStr("ERROR: Data size is zero.", 1);
+            return -1;
+        }
+
+        if ((load_max + 1) < (data_addr + toc_e->size))
+        {
+            PutStr(" ",1);
+            PutStr("ERROR: Data size exceeds FIP size.", 1);
+            return -1;
+        }
+
+        /* Copy the TOC entry to the temporary area. */
+        memcpy((void *)toc_e_tmp, toc_e, sizeof(fip_toc_entry_t));
+
+        toc_e++;
+        toc_e_tmp++;
+    }
+
+    if (NULL == *toc_e_end)
+    {
+        PutStr(" ",1);
+        PutStr("ERROR: FIP does not have the ToC terminator entry", 1);
+        return -1;
+    }
+
+    /* Copy the ToC terminator entry to the temporary area. */
+    memcpy((void *)toc_e_tmp, *toc_e_end, sizeof(fip_toc_entry_t));
+
+    *toc_e_end = toc_e_tmp;
+
+    return 0;
+}
+
+static int32_t fip_write(uintptr_t fip_base, uint32_t fip_size)
+{
+    fip_toc_entry_t *toc_e;
+    fip_toc_entry_t *toc_e_end;
+    uintptr_t fip_max;
+
+    toc_e = (fip_toc_entry_t *)(fip_base + sizeof(fip_toc_header_t));
+    toc_e_end = NULL;
+    fip_max = (fip_base + fip_size) - 1;
+
+    while((uintptr_t)(toc_e + 1) <= (fip_max + 1))
+    {
+        uintptr_t data_addr = fip_base + toc_e->offset_address;
+
+        /* Find the ToC terminator entry. */
+        if (0 == memcmp(&toc_e->uuid, &uuid_null, sizeof(uuid_t)))
+        {
+            toc_e_end = toc_e;
+            break;
+        }
+
+        if ((fip_max + 1) < (data_addr + toc_e->size))
+        {
+            PutStr(" ",1);
+            PutStr("ERROR: Data size exceeds FIP size.", 1);
+            return -1;
+        }
+
+        if (0 < toc_e->size)
+        {
+            /* Write to flash memory if the data size is non-zero. */
+            if (0 != flash_write (toc_e->nvm_offset, data_addr, toc_e->size))
+            {
+                return -1;
+            }
+        }
+        toc_e++;
+    }
+
+    if (NULL == toc_e_end)
+    {
+        PutStr(" ",1);
+        PutStr("ERROR: FIP does not have the ToC terminator entry", 1);
+        return -1;
+    }
+
+    return 0;
+}
+
+static int32_t flash_init (void)
+{
+#if SERIAL_FLASH == 1
+    if (FLASH_TYPE_SPI == gs_flash_type)
+    {
+        /* Initilaize RPC */
+        InitRPC_Mode();
+
+        if(0 != CheckQspiFlashId())
+        {
+            return -1;
+        }
+        return 0;
+    }
+#endif
+
+#if EMMC == 1
+    if (FLASH_TYPE_EMMC == gs_flash_type)
+    {
+        PutStr("",1);
+        PutStr("!!!!!! eMMC is not yet supported. !!!!!!",1);
+        return -1;
+    }
+#endif
+
+    PutStr(" ",1);
+    PutStr("ERROR: Unsupported Flash Type : H'", 0);
+    Data2HexAscii(gs_flash_type, log_str, 4);
+    PutStr(log_str,1);
+    return -1;
+}
+
+static int32_t flash_write (uintptr_t addr, uintptr_t data, uint32_t size)
+{
+    uint32_t mask_block_size;
+    uint32_t block_addr_top;
+    uint32_t block_addr_end;
+    uint32_t block_all_size;
+    uintptr_t load_work_ram;
+
+#if SERIAL_FLASH == 1
+    if (FLASH_TYPE_SPI == gs_flash_type)
+    {
+        mask_block_size = (~gQspi_sa_size) + 1;
+
+        block_addr_top = (uint32_t)(addr & mask_block_size);
+        block_addr_end = (uint32_t)((addr + size) | ~(mask_block_size));
+
+        block_all_size = block_addr_end - block_addr_top;
+
+        load_work_ram = (uintptr_t)WORK_SPI_LOAD_AREA;
+
+        if (block_addr_end > gQspi_end_addess)
+        {
+            PutStr("Program over size Error", 1);
+            PutStr(" Flash Memory Top Address : H'", 0);
+            Data2HexAscii(block_addr_top, log_str, 4);
+            PutStr(log_str ,1);
+            PutStr(" Flash Memory End Address : H'", 0);
+            Data2HexAscii(block_addr_end, log_str, 4);
+            PutStr(log_str, 1);
+            return -1;
+        }
+
+        if (0 != CkQspiFlash1ClearSectorSize((uint32_t)load_work_ram, block_addr_top, block_all_size, 1))
+        {
+            return -1;
+        }
+
+        memset((void *)load_work_ram, 0, block_all_size);
+
+        memcpy((void *)(load_work_ram + (addr - block_addr_top)), (void *)data, size);
+
+        /* SAVE QSPI-FLASH */
+        PutStr(" ",1);
+        PutStr("SAVE SPI-FLASH.......",0);
+        SaveDataWithBuffeQspiFlash(load_work_ram, block_addr_top, block_all_size);
+
+        PutStr("",1);
+        PutStr("======= Qspi  Save Information  =======",1);
+        PutStr(" Flash Memory Top Address : H'",0);
+        Data2HexAscii(block_addr_top, log_str, 4);
+        PutStr(log_str,1);
+        PutStr(" Flash Memory End Address : H'",0);
+        Data2HexAscii(block_addr_end, log_str, 4);
+        PutStr(log_str,1);
+        PutStr("=======================================",1);
+        PutStr("",1);
+    }
+#endif
+
+    return 0;
+}
+
+static int32_t flash_read_sec_mod (void)
+{
+    uintptr_t sec_mod_load;
+    uintptr_t sec_mod_exec;
+    uint32_t  sec_mod_size;
+
+    uintptr_t inst_data_load;
+    uintptr_t inst_data_exec;
+    uint32_t  inst_data_size;
+
+    st_reset_init_t *reset_init;
+
+#if SERIAL_FLASH == 1
+    if (FLASH_TYPE_SPI == gs_flash_type)
+    {
+        PutStr(" ",1);
+        PutStr("LOAD Security Module from SPI-FLASH.....",1);
+
+        sec_mod_load = (uintptr_t)SEC_MOD_LOAD_ADDR_SPI;
+        sec_mod_exec = (uintptr_t)SEC_MOD_EXEC_ADDR;
+        sec_mod_size = SEC_MOD_LOAD_SIZE;
+
+        inst_data_load = (uintptr_t)S_INST_LOAD_ADDR_SPI;
+        inst_data_exec = (uintptr_t)S_INST_EXEC_ADDR;
+        inst_data_size = S_INST_LOAD_SIZE;
+
+        Fast4RdQspiFlash(sec_mod_load, sec_mod_exec, sec_mod_size);
+
+        Fast4RdQspiFlash(inst_data_load, inst_data_exec, inst_data_size);
+    }
+#endif
+    PutStr(" -> H'",0);
+    Data2HexAscii(sec_mod_load, log_str, 4);
+    PutStr(log_str,0);
+    PutStr("-H'",0);
+    Data2HexAscii(sec_mod_load + sec_mod_size, log_str, 4);
+    PutStr(log_str,1);
+
+    gs_s_inst_data = (uint32_t *)inst_data_exec;
+    secure_boot_arg = (st_sec_module_arg_t *)sec_mod_exec;
+    secure_boot_api = (fp_sec_module_api_t)(sec_mod_exec + SEC_MODULE_SHARED_SIZE);
+
+    /* Initialize Security Module */
+    secure_boot_arg->cmd = CMD_RESET_INIT;
+    secure_boot_arg->len = sizeof(st_reset_init_t);
+
+    reset_init = &(secure_boot_arg->prm).reset_init;
+    reset_init->inst_area = (uint64_t) inst_data_exec;
+
+    mmio_write_32(CPG_CPGWPR,  0x5A5AFFFF);
+    mmio_write_32(CPG_CPGWPCR, 0xA5A50000);
+
+    PutStr(" Security Module: CMD_RESET_INIT.....",0);
+    if (SEC_MODULE_RET_OK != secure_boot_api())
+    {
+        PutStr(" Error!", 1);
+        PutStr("",1);
+        return -1;
+    }
+    else
+    {
+        PutStr(" Success!", 1);
+        PutStr("",1);
+    }
+
+    return 0;
+}
diff --git a/include/dgtable.h b/include/dgtable.h
old mode 100644
new mode 100755
index 2d8f277..a92e111
--- a/include/dgtable.h
+++ b/include/dgtable.h
@@ -32,7 +32,7 @@
 /**********************
 * COMMAND_UNITE       *
 ***********************/
-#define		COMMAND_UNIT		21
+#define		COMMAND_UNIT		23
 #define		NORMAL_END		0
 #define		ERROR_END		1
 
diff --git a/include/fiploader.h b/include/fiploader.h
new file mode 100644
index 0000000..c868d0d
--- /dev/null
+++ b/include/fiploader.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2021, Renesas Electronics Corporation
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are met:
+ *
+ *   - Redistributions of source code must retain the above copyright notice,
+ *     this list of conditions and the following disclaimer.
+ *
+ *   - Redistributions in binary form must reproduce the above copyright
+ *     notice, this list of conditions and the following disclaimer in the
+ *     documentation and/or other materials provided with the distribution.
+ *
+ *   - Neither the name of Renesas nor the names of its contributors may be
+ *     used to endorse or promote products derived from this software without
+ *     specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef FIPLOADER_H
+#define FIPLOADER_H
+
+#if SERIAL_FLASH == 1
+extern void dgG2LoadSpiflash0_2s(void);
+extern void dgG2LoadSpiflash0_3s(void);
+#endif  /* SERIAL_FLASH == 1 */
+
+#endif /* FIPLOADER_H */
diff --git a/makefile b/makefile
old mode 100644
new mode 100755
index 0a590e0..6337b1b
--- a/makefile
+++ b/makefile
@@ -105,11 +105,11 @@ endif
 endif
 
 ifeq ("$(USB)", "ENABLE")
-        CFLAGS += -DUSB_ENABLE=1
+	CFLAGS += -DUSB_ENABLE=1
 endif
 
 ifeq ("$(USB)", "DISABLE")
-        CFLAGS += -DUSB_ENABLE=0
+	CFLAGS += -DUSB_ENABLE=0
 endif
 
 ifeq ("$(SERIAL_FLASH)", "ENABLE")
@@ -124,6 +124,13 @@ else
 	CFLAGS += -DEMMC=0
 endif
 
+ifeq ("$(SEC_PRV)", "ENABLE")
+ifeq ("$(SEC_PRV_KEY_ENC)", "")
+$(error SEC_PRV_KEY_ENC is not set)
+endif
+	CFLAGS += -DSEC_PRV=1 -D'SEC_PRV_KEY_ENC="${SEC_PRV_KEY_ENC}"'
+endif
+
 DDR_DEF = ddr_qos_init_setting
 
 LIBS        = -L$(subst libc.a, ,$(shell $(CC) -print-file-name=libc.a 2> /dev/null)) -lc
@@ -162,6 +169,11 @@ SRC_FILE :=					\
 	micro_wait.c				\
 	ddrcheck.c
 
+ifeq ("$(SEC_PRV)", "ENABLE")
+SRC_FILE +=					\
+	fiploader.c
+endif
+
 ifeq ("$(SERIAL_FLASH)", "ENABLE")
 SRC_FILE +=					\
 	dgmodul4.c				\
diff --git a/makefile.linaro b/makefile.linaro
old mode 100644
new mode 100755
index 48728db..78907eb
--- a/makefile.linaro
+++ b/makefile.linaro
@@ -124,6 +124,13 @@ else
 	CFLAGS += -DEMMC=0
 endif
 
+ifeq ("$(SEC_PRV)", "ENABLE")
+ifeq ("$(SEC_PRV_KEY_ENC)", "")
+$(error SEC_PRV_KEY_ENC is not set)
+endif
+	CFLAGS += -DSEC_PRV=1 -D'SEC_PRV_KEY_ENC="${SEC_PRV_KEY_ENC}"'
+endif
+
 DDR_DEF = ddr_qos_init_setting
 
 LIBS        = -L$(subst libc.a, ,$(shell $(CC) -print-file-name=libc.a 2> /dev/null)) -lc
@@ -162,6 +169,11 @@ SRC_FILE :=					\
 	micro_wait.c				\
 	ddrcheck.c
 
+ifeq ("$(SEC_PRV)", "ENABLE")
+SRC_FILE +=					\
+	fiploader.c
+endif
+
 ifeq ("$(SERIAL_FLASH)", "ENABLE")
 SRC_FILE +=					\
 	dgmodul4.c				\
-- 
2.7.4
